<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 对应 dao 中的 接口 -->
<mapper namespace="com.bwf.dao.UserMapper">

	<resultMap type="com.bwf.entity.User" id="simpleUser">
		<id column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
		<result column="password" property="password"/>
		<result column="nick_name" property="nickName"/>
		<result column="leader_id" property="leaderId"/>
		<result column="avater" property="avater"/>
		
		<association property="leader"
					javaType="com.bwf.entity.User"
					column="leader_id"
					select="getUserById">
		</association>
	</resultMap>


	<resultMap type="com.bwf.entity.User" id="nbUser">
		<id column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
		<result column="password" property="password"/>
		<result column="nick_name" property="nickName"/>
		<result column="avater" property="avater"/>
		
		<collection property="menus" ofType="com.bwf.entity.Menu" resultMap="com.bwf.dao.MenuMapper.menu">
			
		</collection>
		<collection property="operates" ofType="com.bwf.entity.Operate" resultMap="com.bwf.dao.OperateMapper.operate">
			
		</collection>
	</resultMap>
	
  

    <select id="getUserById" parameterType="int" resultMap="simpleUser">
        select * from `user` where user_id = #{id}
    </select>
    
    <select id="getUsersById" parameterType="int" resultMap="simpleUser">
        select * from `user` where user_id = #{id}
    </select>
    
    <!-- 用户登录 -->
    <select id="getUserByUserNameAndPassword" 
    	parameterType="com.bwf.entity.User" 
    	resultMap="simpleUser">
    	select * from `user` where user_name = #{userName} and password = #{password}
   	</select>
   	
   	<!-- 根据用户id获取菜单， 操作的集合-->
   	<select id="getMenuAndoperateByUserId" parameterType="int" resultMap="nbUser">
   		select user.*,menu.*,operate.*from user 
		left outer join user_role on user.user_id=user_role.user_id
		left outer join role on user_role.role_id=role.role_id
		left outer join role_permission on role.role_id = role_permission.role_id
		left outer join permission on role_permission.permission_id=permission.permission_id
		left outer join permission_menu on permission.permission_id=permission_menu.permission_id
		left outer join menu on permission_menu.menu_id=menu.menu_id
		left outer join permission_operate on permission.permission_id=permission_operate.permission_id
		left outer join operate on permission_operate.operate_id=operate.operate_id
		WHERE user.user_id = #{userId}
   	</select>
   	
   	<!-- 查询所有用户,分页 -->
   	<select id="getAllUsers" resultMap="simpleUser">
        select * from `user`limit #{page},#{pageSize}
    </select>
    
    <!-- 查询所有用户 -->
   	<select id="getAllUser" resultMap="simpleUser">
        select * from `user`
    </select>
    
    <!-- 查询用户表总共有多少条数据 -->
     <select id="getAllCounts" resultType="int">
     	select count(*) from `user`
     </select>
     
     <!-- 验证用户名 -->
     <select id="checkUser" parameterType="String" resultMap="simpleUser">
     	select * from `user` where user_name=#{userName}
     </select>
    
    <!-- 增加一个 user -->
    <insert id="add" parameterType="com.bwf.entity.User" useGeneratedKeys="true" keyProperty="user_id">
    	insert into `user` values ( null , #{userName} , #{password} , #{nickName} , #{leaderId} , #{avater}  )
    </insert>
    
   
    <!-- 删除 一个 user -->
    <delete id="deletUser" parameterType="int">
    	delete from user where user_id = #{id}
    </delete>
    
    <!-- 删除多个user -->
    <delete id="deletUsers" >
    	delete from user where user_id in
    	<foreach collection="idList" open="(" close=")" separator="," item="id">
    		#{id}
    	</foreach>
    </delete>
    
    <!-- 编辑员工，不重置密码 -->
    <update id="updatewithoutPassword" parameterType="com.bwf.entity.User">
    	update `user` set  
    		nick_name = #{nickName} ,
    		leader_id = #{leader.userId} 
    	where user_id = #{userId}
    </update>
    <!-- 编辑员工，重置密码 -->
   <update id="updatewithPassword" parameterType="com.bwf.entity.User">
    	update `user` set  
    		password = '202CB962AC59075B964B07152D234B70',
    		nick_name = #{nickName} ,
    		leader_id = #{leader.userId} 
    	where user_id = #{userId}
    </update>
    
    <!-- 根据pid获取leader -->
    <select id="getNickeNameByUserId" parameterType="int" resultType="com.bwf.entity.User">
        select nick_name from `user` where user_id = #{pId}
    </select>
    

</mapper>